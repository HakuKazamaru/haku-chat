// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using haku_chat.DbContexts;

#nullable disable

namespace haku_chat.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    partial class ChatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("haku_chat.Models.ChatLoginUserModel", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .HasColumnOrder(1)
                        .HasComment("入室者名");

                    b.Property<string>("HostName")
                        .HasColumnType("varchar(128)")
                        .HasColumnName("host_name")
                        .HasColumnOrder(4)
                        .HasComment("ホスト名");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(43)
                        .HasColumnType("varchar(43)")
                        .HasColumnName("ip_address")
                        .HasColumnOrder(3)
                        .HasComment("IPアドレス");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_update")
                        .HasColumnOrder(10)
                        .HasComment("最終更新日時");

                    b.Property<DateTime?>("LoginTime")
                        .HasColumnType("datetime")
                        .HasColumnName("login_time")
                        .HasColumnOrder(8)
                        .HasComment("入室日時");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime")
                        .HasColumnName("logout_time")
                        .HasColumnOrder(9)
                        .HasComment("退室日時");

                    b.Property<string>("MachineName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("machine_name")
                        .HasColumnOrder(5)
                        .HasComment("コンピューター名");

                    b.Property<string>("OsName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("os_name")
                        .HasColumnOrder(6)
                        .HasComment("OS名称");

                    b.Property<ushort>("Status")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("status")
                        .HasColumnOrder(2)
                        .HasComment("入室ステータス");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("user_agent")
                        .HasColumnOrder(7)
                        .HasComment("ブラウザユーザーエージェント");

                    b.HasKey("Name");

                    b.ToTable("chat_login_user");

                    b.HasComment("チャット入室ステータス管理テーブル");
                });

            modelBuilder.Entity("haku_chat.Models.ChatLogModel", b =>
                {
                    b.Property<DateTime>("RegTime")
                        .HasColumnType("datetime(3)")
                        .HasColumnName("reg_date")
                        .HasColumnOrder(1)
                        .HasComment("投稿日時");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message")
                        .HasColumnOrder(4)
                        .HasComment("チャットメッセージ");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name")
                        .HasColumnOrder(2)
                        .HasComment("投稿者名");

                    b.Property<ushort?>("NameColorId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("name_color_id")
                        .HasColumnOrder(3)
                        .HasComment("投稿者文字色ID");

                    b.HasKey("RegTime");

                    b.ToTable("chat_log");

                    b.HasComment("チャットログ管理テーブル");
                });

            modelBuilder.Entity("haku_chat.Models.ChatNameColorMasterModel", b =>
                {
                    b.Property<ushort>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasComment("投稿者名文字色ID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code")
                        .HasColumnOrder(3)
                        .HasComment("投稿者名文字色カラーコード");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("name")
                        .HasColumnOrder(2)
                        .HasComment("投稿者名文字色名称");

                    b.HasKey("Id");

                    b.ToTable("chat_name_color_master");

                    b.HasComment("投稿者文字色マスターテーブル");
                });

            modelBuilder.Entity("haku_chat.Models.UserConfigModel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasComment("ユーザーID（システム）");

                    b.Property<ushort>("NameColorId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("name_color_id")
                        .HasColumnOrder(2)
                        .HasComment("投稿者名文字色ID");

                    b.Property<bool>("SendInfoMail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("send_info_mail")
                        .HasColumnOrder(3)
                        .HasComment("通知メール送信フラグ");

                    b.Property<short>("ShowChatLogCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("show_chat_log_count")
                        .HasColumnOrder(4)
                        .HasComment("チャットログ表示件数");

                    b.Property<DateTime>("UpdateDatetime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_datetime")
                        .HasColumnOrder(5)
                        .HasComment("更新日時");

                    b.HasKey("Id");

                    b.ToTable("user_config");

                    b.HasComment("ユーザー設定管理テーブル");
                });

            modelBuilder.Entity("haku_chat.Models.UserMasterModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasComment("ユーザーID（システム）");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email")
                        .HasComment("メールアドレス");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("password")
                        .HasComment("パスワード");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(256)")
                        .HasColumnName("passwordhash")
                        .HasComment("パスワードハッシュ");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2)
                        .HasComment("ユーザーID（ユーザー）");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("user_name")
                        .HasComment("ユーザー名");

                    b.HasKey("Id");

                    b.ToTable("user_master");

                    b.HasComment("ユーザーマスターテーブル");
                });
#pragma warning restore 612, 618
        }
    }
}
